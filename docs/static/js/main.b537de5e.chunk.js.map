{"version":3,"sources":["services/card.js","components/card/CardGalaxy.js","components/card/CardsScreen.js","components/ui/Header.js","App.js","theme.js","index.js"],"names":["cardService","getCard","axios","get","then","response","data","getFiveCards","CardGalaxy","card","handleClickCard","Grid","item","xs","sm","lg","xl","Card","sx","maxWidth","CardActionArea","onClick","id","CardMedia","component","style","height","image","card_images","image_url","alt","CardContent","Typography","gutterBottom","variant","align","name","CardsScreen","score","setScore","bestScore","setBestScore","level","setLevel","useState","cards","setCards","matchCards","setMatchCards","randomeCards","sort","Math","random","newCard","a","concat","initialGame","useCallback","newCards","useEffect","includes","length","container","spacing","map","Header","AppBar","position","Toolbar","IconButton","size","edge","color","mr","flexGrow","Box","fontWeight","App","direction","m","mb","theme","createTheme","palette","primary","red","secondary","green","status","danger","orange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b537de5e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'https://db.ygoprodeck.com/api/v7/randomcard.php';\n\nconst getCard = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst getFiveCards = () => {\n  const request = axios.get(\n    'https://db.ygoprodeck.com/api/v7/cardinfo.php?cardset=metal%20raiders&num=6&offset=0'\n  );\n  return request.then((response) => response.data.data);\n};\n\nconst cardService = {\n  getCard,\n  getFiveCards,\n};\n\nexport default cardService;\n","import React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea, Grid } from '@mui/material';\n\nexport default function CardGalaxy({ card, handleClickCard }) {\n  return (\n    <Grid item xs={4} sm={4} lg={3} xl={2}>\n      <Card sx={{ maxWidth: 200 }}>\n        <CardActionArea onClick={() => handleClickCard(card.id)}>\n          <CardMedia\n            component='img'\n            style={{ maxWidth: '100%', height: 'auto' }}\n            image={card.card_images[0].image_url}\n            alt='green iguana'\n          />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant='h6'\n              component='div'\n              align='center'\n            >\n              {card.name}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n","import { Grid } from '@mui/material';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cardService from '../../services/card';\nimport CardGalaxy from './CardGalaxy';\n\nexport const CardsScreen = ({\n  score,\n  setScore,\n  bestScore,\n  setBestScore,\n  level,\n  setLevel,\n}) => {\n  const [cards, setCards] = useState([]);\n  const [matchCards, setMatchCards] = useState([]);\n\n  const randomeCards = cards.sort(function () {\n    return Math.random() - 0.5;\n  });\n\n  const newCard = async () => {\n    const newCard = await cardService.getCard();\n    setCards(cards.concat(newCard));\n  };\n\n  const initialGame = useCallback(async () => {\n    const newCards = await cardService.getFiveCards();\n    setCards(newCards);\n  }, []);\n\n  useEffect(() => {\n    initialGame();\n  }, [initialGame]);\n\n  const handleClickCard = (id) => {\n    setMatchCards(matchCards.concat(id));\n    setScore(score + 1);\n    if (score >= bestScore) {\n      setBestScore(bestScore + 1);\n    }\n\n    if (matchCards.includes(id)) {\n      initialGame();\n      setScore(0);\n      setLevel(0);\n      setMatchCards([]);\n    }\n\n    if (matchCards.length === cards.length - 1) {\n      newCard();\n      setMatchCards([]);\n      setLevel(level + 1);\n    }\n  };\n\n  return (\n    <Grid item container spacing={2}>\n      {randomeCards.map((card) => (\n        <CardGalaxy\n          key={card.id}\n          card={card}\n          handleClickCard={handleClickCard}\n        />\n      ))}\n    </Grid>\n  );\n};\n","import { AppBar, IconButton, Toolbar, Typography } from '@mui/material';\nimport React from 'react';\nimport { Box } from '@mui/system';\nimport AttributionIcon from '@mui/icons-material/Attribution';\n\nexport const Header = ({ score, bestScore }) => {\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton\n          size='large'\n          edge='start'\n          color='inherit'\n          aria-label='menu'\n          sx={{ mr: 2 }}\n        >\n          <AttributionIcon />\n        </IconButton>\n        <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\n          YU - GI - OH\n        </Typography>\n        <Box>\n          <Typography\n            variant='h6'\n            component='div'\n            style={{ color: '#4caf50', fontWeight: 600 }}\n          >\n            Score : {score}\n          </Typography>\n          <Typography variant='h6' component='div'>\n            Best Score : {bestScore}\n          </Typography>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import { Grid, Typography } from '@mui/material';\nimport React, { useState } from 'react';\nimport { CardsScreen } from './components/card/CardsScreen';\nimport { Header } from './components/ui/Header';\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(0);\n  return (\n    <Grid container direction='column'>\n      <Grid item>\n        <Header score={score} bestScore={bestScore} />\n      </Grid>\n      <Grid item container>\n        <Grid item xs={false} sm={2} />\n        <Grid item xs={12} sm={8} m={2}>\n          <Grid item>\n            <Typography variant='h2' align='center' mb={2}>\n              Level {level}\n            </Typography>\n          </Grid>\n          <CardsScreen\n            score={score}\n            setScore={setScore}\n            bestScore={bestScore}\n            setBestScore={setBestScore}\n            level={level}\n            setLevel={setLevel}\n          />\n        </Grid>\n        <Grid item xs={false} sm={2} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@mui/material';\nimport { green, orange, red } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: red,\n    secondary: green,\n  },\n\n  status: {\n    danger: orange[500],\n  },\n});\n\nexport default theme;\n","import { ThemeProvider } from '@emotion/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport theme from './theme';\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}